{"ast":null,"code":"var _jsxFileName = \"/Users/pritamroy/Documents/workspace/sovereign_chains/client/src/components/landing/Landing.js\";\nimport React from 'react';\nimport { Container } from '@chakra-ui/react';\nimport { RulesDialog } from '../dialogs/RulesDialog';\nimport { TopNav } from '../nav/TopNav';\nimport { ethers } from \"ethers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Landing() {\n  const connectWallet = () => {\n    async function connectInjectProvider() {\n      // A Web3Provider wraps a standard Web3 provider, which is\n      // what MetaMask injects as window.ethereum into each page\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n\n      // MetaMask requires requesting permission to connect users accounts\n      await provider.send(\"eth_requestAccounts\", []);\n\n      // The MetaMask plugin also allows signing transactions to\n      // send ether and pay to change state within the blockchain.\n      // For this, you need the account signer...\n      const signer = provider.getSigner();\n    }\n    connectInjectProvider();\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(TopNav, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(RulesDialog, {\n      connectWallet: connectWallet,\n      onClose: hideRulesDialog\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 9\n  }, this);\n}\n_c = Landing;\nvar _c;\n$RefreshReg$(_c, \"Landing\");","map":{"version":3,"names":["React","Container","RulesDialog","TopNav","ethers","Landing","connectWallet","connectInjectProvider","provider","providers","Web3Provider","window","ethereum","send","signer","getSigner","hideRulesDialog"],"sources":["/Users/pritamroy/Documents/workspace/sovereign_chains/client/src/components/landing/Landing.js"],"sourcesContent":["import React from 'react';\nimport { Container } from '@chakra-ui/react'\nimport { RulesDialog } from '../dialogs/RulesDialog';\nimport { TopNav } from '../nav/TopNav';\nimport { ethers } from \"ethers\";\n\nexport function Landing() {\n    const connectWallet = () => {\n        async function connectInjectProvider() {\n            // A Web3Provider wraps a standard Web3 provider, which is\n            // what MetaMask injects as window.ethereum into each page\n            const provider = new ethers.providers.Web3Provider(window.ethereum)\n\n            // MetaMask requires requesting permission to connect users accounts\n            await provider.send(\"eth_requestAccounts\", []);\n\n            // The MetaMask plugin also allows signing transactions to\n            // send ether and pay to change state within the blockchain.\n            // For this, you need the account signer...\n            const signer = provider.getSigner()\n        }\n        connectInjectProvider();\n    }\n    return (\n        <Container>\n            <TopNav/>\n            <RulesDialog connectWallet={connectWallet} onClose={hideRulesDialog} />\n        </Container>\n    )\n}"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,SAASC,WAAW,QAAQ,wBAAwB;AACpD,SAASC,MAAM,QAAQ,eAAe;AACtC,SAASC,MAAM,QAAQ,QAAQ;AAAC;AAEhC,OAAO,SAASC,OAAO,GAAG;EACtB,MAAMC,aAAa,GAAG,MAAM;IACxB,eAAeC,qBAAqB,GAAG;MACnC;MACA;MACA,MAAMC,QAAQ,GAAG,IAAIJ,MAAM,CAACK,SAAS,CAACC,YAAY,CAACC,MAAM,CAACC,QAAQ,CAAC;;MAEnE;MACA,MAAMJ,QAAQ,CAACK,IAAI,CAAC,qBAAqB,EAAE,EAAE,CAAC;;MAE9C;MACA;MACA;MACA,MAAMC,MAAM,GAAGN,QAAQ,CAACO,SAAS,EAAE;IACvC;IACAR,qBAAqB,EAAE;EAC3B,CAAC;EACD,oBACI,QAAC,SAAS;IAAA,wBACN,QAAC,MAAM;MAAA;MAAA;MAAA;IAAA,QAAE,eACT,QAAC,WAAW;MAAC,aAAa,EAAED,aAAc;MAAC,OAAO,EAAEU;IAAgB;MAAA;MAAA;MAAA;IAAA,QAAG;EAAA;IAAA;IAAA;IAAA;EAAA,QAC/D;AAEpB;AAAC,KAvBeX,OAAO;AAAA;AAAA"},"metadata":{},"sourceType":"module"}