{"ast":null,"code":"var _jsxFileName = \"/Users/pritamroy/Documents/workspace/sovereign_chains/client/src/components/landing/Landing.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Container } from '@chakra-ui/react';\nimport { RulesDialog } from '../dialogs/RulesDialog';\nimport { TopNav } from '../nav/TopNav';\nimport { ethers } from \"ethers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Landing() {\n  _s();\n  const [rulesDialogVisible, setRulesDialogVisible] = useState(false);\n  const [currentProvider, setCurrentProvider] = useState(null);\n  const connectWallet = () => {\n    async function connectInjectProvider() {\n      // A Web3Provider wraps a standard Web3 provider, which is\n      // what MetaMask injects as window.ethereum into each page\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n\n      // MetaMask requires requesting permission to connect users accounts\n      await provider.send(\"eth_requestAccounts\", []);\n\n      // The MetaMask plugin also allows signing transactions to\n      // send ether and pay to change state within the blockchain.\n      // For this, you need the account signer...\n      const signer = provider.getSigner();\n    }\n    connectInjectProvider();\n  };\n  useEffect(() => {\n    if (window.web3 && window.web3.currentProvider) {\n      setCurrentProvider(window.web3.currentProvider);\n    }\n  }, []);\n  const hideRulesDialog = () => {\n    setRulesDialogVisible(false);\n  };\n  const showRulesDialog = () => {\n    setRulesDialogVisible(true);\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(TopNav, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(RulesDialog, {\n      connectWallet: connectWallet,\n      onClose: hideRulesDialog,\n      show: rulesDialogVisible\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n}\n_s(Landing, \"VmLiLIaM3qQyJEdXLXabWitPcH8=\");\n_c = Landing;\nvar _c;\n$RefreshReg$(_c, \"Landing\");","map":{"version":3,"names":["React","useState","useEffect","Container","RulesDialog","TopNav","ethers","Landing","rulesDialogVisible","setRulesDialogVisible","currentProvider","setCurrentProvider","connectWallet","connectInjectProvider","provider","providers","Web3Provider","window","ethereum","send","signer","getSigner","web3","hideRulesDialog","showRulesDialog"],"sources":["/Users/pritamroy/Documents/workspace/sovereign_chains/client/src/components/landing/Landing.js"],"sourcesContent":["import React, { useState, useEffect, } from 'react';\nimport { Container } from '@chakra-ui/react'\nimport { RulesDialog } from '../dialogs/RulesDialog';\nimport { TopNav } from '../nav/TopNav';\nimport { ethers } from \"ethers\";\n\nexport function Landing() {\n    const [ rulesDialogVisible, setRulesDialogVisible ] = useState(false);\n    const [ currentProvider, setCurrentProvider ] = useState(null);\n    const connectWallet = () => {\n        async function connectInjectProvider() {\n            // A Web3Provider wraps a standard Web3 provider, which is\n            // what MetaMask injects as window.ethereum into each page\n            const provider = new ethers.providers.Web3Provider(window.ethereum)\n\n            // MetaMask requires requesting permission to connect users accounts\n            await provider.send(\"eth_requestAccounts\", []);\n\n            // The MetaMask plugin also allows signing transactions to\n            // send ether and pay to change state within the blockchain.\n            // For this, you need the account signer...\n            const signer = provider.getSigner();\n        }\n        connectInjectProvider();\n    }\n\n    useEffect(() => {\n        if (window.web3 && window.web3.currentProvider) {\n           setCurrentProvider(window.web3.currentProvider);\n        }\n    }, []);\n\n    const hideRulesDialog = () => {\n       setRulesDialogVisible(false); \n    }\n\n    const showRulesDialog = () => {\n        setRulesDialogVisible(true); \n    }\n\n    return (\n        <Container>\n            <TopNav/>\n            <RulesDialog\n                connectWallet={connectWallet}\n                onClose={hideRulesDialog}\n                show={rulesDialogVisible}\n            />\n        </Container>\n    )\n}"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAS,OAAO;AACnD,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,SAASC,WAAW,QAAQ,wBAAwB;AACpD,SAASC,MAAM,QAAQ,eAAe;AACtC,SAASC,MAAM,QAAQ,QAAQ;AAAC;AAEhC,OAAO,SAASC,OAAO,GAAG;EAAA;EACtB,MAAM,CAAEC,kBAAkB,EAAEC,qBAAqB,CAAE,GAAGR,QAAQ,CAAC,KAAK,CAAC;EACrE,MAAM,CAAES,eAAe,EAAEC,kBAAkB,CAAE,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAC9D,MAAMW,aAAa,GAAG,MAAM;IACxB,eAAeC,qBAAqB,GAAG;MACnC;MACA;MACA,MAAMC,QAAQ,GAAG,IAAIR,MAAM,CAACS,SAAS,CAACC,YAAY,CAACC,MAAM,CAACC,QAAQ,CAAC;;MAEnE;MACA,MAAMJ,QAAQ,CAACK,IAAI,CAAC,qBAAqB,EAAE,EAAE,CAAC;;MAE9C;MACA;MACA;MACA,MAAMC,MAAM,GAAGN,QAAQ,CAACO,SAAS,EAAE;IACvC;IACAR,qBAAqB,EAAE;EAC3B,CAAC;EAEDX,SAAS,CAAC,MAAM;IACZ,IAAIe,MAAM,CAACK,IAAI,IAAIL,MAAM,CAACK,IAAI,CAACZ,eAAe,EAAE;MAC7CC,kBAAkB,CAACM,MAAM,CAACK,IAAI,CAACZ,eAAe,CAAC;IAClD;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMa,eAAe,GAAG,MAAM;IAC3Bd,qBAAqB,CAAC,KAAK,CAAC;EAC/B,CAAC;EAED,MAAMe,eAAe,GAAG,MAAM;IAC1Bf,qBAAqB,CAAC,IAAI,CAAC;EAC/B,CAAC;EAED,oBACI,QAAC,SAAS;IAAA,wBACN,QAAC,MAAM;MAAA;MAAA;MAAA;IAAA,QAAE,eACT,QAAC,WAAW;MACR,aAAa,EAAEG,aAAc;MAC7B,OAAO,EAAEW,eAAgB;MACzB,IAAI,EAAEf;IAAmB;MAAA;MAAA;MAAA;IAAA,QAC3B;EAAA;IAAA;IAAA;IAAA;EAAA,QACM;AAEpB;AAAC,GA5CeD,OAAO;AAAA,KAAPA,OAAO;AAAA;AAAA"},"metadata":{},"sourceType":"module"}